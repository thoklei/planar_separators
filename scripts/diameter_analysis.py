"""
This script analyses the diameter development as instances grow larger.
"""
import pandas as pd
import numpy as np
import argparse
import os
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from utils import extract_short_instance_name


def get_label(name):
    return name[0:name.find('/')]


def analyze_diameter(file, target):
    root = ET.parse(file).getroot()

    # will map instance type to dict of properties
    labels = {}

    for instance in root.findall('instance'):

        # ignoring the diameter graph because it messes up the scatter plot
        if instance.find('name').text != 'table/diameter/diameter_3333':

            # grab dictionary based on label
            label = get_label(instance.find('name').text)
            if label not in labels:
                labels[label] = {'sizes': [], 'diams': [], 'names': []}

            sizes = labels[label]['sizes']
            diams = labels[label]['diams']
            names = labels[label]['names']

            # extract properties
            name = instance.find('name').text
            size = int(instance.find('nodes').text)
            diam = int(instance.find('diameter').text)

            sizes.append(size)
            diams.append(diam)
            names.append(name)

    print(labels)

    show_names = ['rect_500_20', 'sixgrid_237_20', 'grid_100', 'San Francisco', 'Berlin']  # list of names to show
    colors = cm.rainbow(np.linspace(0, 1, len(np.unique(labels))))

    plt.figure(figsize=(14, 6))
    plt.title("Instance size vs diameter")
    plt.xlabel("Instance Size (number of nodes)")
    plt.ylabel("Diameter")

    for idx, (label, dic) in enumerate(labels.items()):
        plt.scatter(dic['sizes'], dic['diams'], label=label)

        for i, txt in enumerate(dic['names']):
            short_name = extract_short_instance_name(txt)
            if short_name in show_names:  # or "city" in txt:
                plt.annotate("  "+short_name, (dic['sizes'][i], dic['diams'][i]))

    plt.legend()

    plt.savefig(os.path.join(target, "diameter_scatter.png"))

    plt.show()


def main(path, target):
    """
    Calls the different analysis methods.

    :param path: path to csv-file generated by experiments
    :param target: path to folder to contain results
    """

    # read csv file
    df = pd.read_csv(path, sep=r'\s*,\s*', encoding='utf-8')

    # analyze diameter development
    analyze_diameter(path, target)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Data analysis and plotting.')
    parser.add_argument('--path', type=str, help='Path to data file')
    parser.add_argument('--target', type=str, help='Path to folder with plots')
    args = parser.parse_args()

    if not os.path.exists(args.target):
        os.mkdir(args.target)
    main(args.path, args.target)
