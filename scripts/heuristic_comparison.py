"""
This script compares THM and tri-BFS and combinations thereof.
(essentially data_analysis.py, I thought I'd need to change more stuff)
"""
import pandas as pd
import argparse
import utils
import os
from utils import analyze_separator_size, analyze_instance_performance, analyze_separator_speed, \
    analyze_separator_balance, analyze_runtime_development


def main(path, target):
    """
    Calls the different analysis methods.

    :param path: path to csv-file generated by experiments
    :param target: path to folder to contain results
    """

    # read csv file
    df = pd.read_csv(path, sep=r'\s*,\s*', encoding='utf-8', engine='python')

    print(f"Analyzing instances ranging in size from {df['nodes'].min()} nodes to {df['nodes'].max()} nodes.")

    df = df.sort_values(by=['nodes'])
    instances = df['instance'].unique()

    algorithms = df['algorithm'].unique()

    # Which core algorithm yields the smallest relative separators?
    analyze_separator_size(df, "rel_sepsize_core", algorithms, instances, target)

    # Now, let's check the performance of all algorithms per instance in one huge plot.
    analyze_instance_performance(df, "per_instance", instances, algorithms, target)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Data analysis and plotting.')
    parser.add_argument('--path', type=str, help='Path to data file')
    parser.add_argument('--target', type=str, help='Path to folder with plots')
    args = parser.parse_args()

    if not os.path.exists(args.target):
        os.mkdir(args.target)
    main(args.path, args.target)
